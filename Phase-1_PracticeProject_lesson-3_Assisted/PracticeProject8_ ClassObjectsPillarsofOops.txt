1)classes and objects
class Student{
	int rollno;
	String Name;
	String department;
	Student(){                 
// constructor
		this.rollno = 104;
		this.Name = "Sharmila J";
		this.department = "IT";
	}
	Student(int rollno, String Name, String department){   
//parameterized constructor
		this.rollno = rollno; 
		this.Name = Name;
		this.department = department;
	}
	void details_display() {
		System.out.println("My name is : " +Name);
		System.out.println("My roll number is : " +rollno); 
		System.out.println("Department : " +department);
	}
	
}
public class ClassObjectExample {
	public static void main(String[] args) {
		Student obj = new Student();   //object creation for the class student
		Student obj2 = new Student(105,"Shree S","IT"); //calling parameterized constructor
		obj.details_display();
		obj2.details_display();
		
	}
}

2)Encapsulation

class Employee{
	private int id;
	private String Name;
	public void setVal(int id, String Name) {
		this.id = id;
		this.Name = Name;
		System.out.println(id);
		System.out.println(Name);
	}
}
public class EncapsulationExample {
	public static void main(String[] args) {
		Employee obj = new Employee();
		obj.setVal(1,"Hari");	
	}
}


3)Inheritance

class bike{    //Superclass
	void speed() {
		System.out.println("Speed is 80km/hr");
	}
}
class pulsar extends bike {  //Subclass
	void colour(){
		System.out.println("The colour is blue");
	}
}
class honda extends bike {     //pulsar and honda are inherits bike which is hierarchical inheritance
	void colour() {
		System.out.println("The colour is green");
	}	
}
class tvs extends honda{   //honda inherits bike, tvs inherits honda which is multilevel inheritance
	void mileage() {
		System.out.println("very good mileage");
	}
}
public class InheritanceExample {
	public static void main(String[] args) {
		bike obj = new bike();
		pulsar obj2 = new pulsar();
		honda obj3 = new honda();
		tvs obj4 = new tvs();
		System.out.println("Pulsar");
		obj2.speed();
		obj2.colour();
		System.out.println("Honda");
		obj3.colour();
		System.out.println("KTM");
		obj4.colour();
		obj4.mileage();
	
	}

}

//Polymorphism

class CompileTimePoly{     //methodoverloading
	void area(int r) {
		double area =3.142*r;
		System.out.println("Area of a circle : "+area);
	}
	void area(int b, int h) {
		double area =0.5*b*h;
		System.out.println("Area of a triangle : "+area);
	}
}
#Runtime polymorphism
class Animal{
	void move() {
		System.out.println("All animals can move");
	}
}
class dog extends Animal{
	void move() {
		System.out.println("Dogs can walk"); //methodoverriding
		}
} 
public class PolymorphismExample {
	public static void main(String[] args) {
		CompileTimePoly obj = new CompileTimePoly();
		obj.area(7);
		obj.area(2, 5);
		Animal obj2 = new Animal();
		obj2.move();
		dog obj3 = new dog();
		obj3.move();
		
	}

}

//Abstraction

abstract class Shape{
	abstract void area();
}
class Circle extends Shape{
	int r;
	void area() {
		System.out.println("area = " +(3.142*r*r));
	}
}
class Rectangle extends Shape{
	int l;
	int b;
	void area() {
		System.out.println("area = " +(l*b));
	}
}
public class AbstractionExample {
	public static void main(String[] args) {
		Circle obj = new Circle();
		obj.r = 2;
		obj.area();
		Rectangle obj1 = new Rectangle();
		obj1.l = 4;
		obj1.b = 6;
		obj1.area();
	}

}

