package circularls;
class LinkNode
{
    public int data;
    public LinkNode next;
    public LinkNode(int data, LinkNode first)
    {
        this.data = data;
        this.next = first;
    }
}
public class SortedCircular
{
    public LinkNode head;
    SortedCircular()
    {
        this.head = null;
    }
    public void insert(int value)
    {
        LinkNode node = new LinkNode(value, this.head);
        if (this.head == null)
        {
            this.head = node;
            node.next = this.head;
        }
        else
        {
            LinkNode temp = this.head;
            LinkNode hold = null;
            if (temp.data >= value)
            {
                while (temp.next != this.head)
                {
                    temp = temp.next;
                }
                temp.next = node;
                node.next = this.head;
                this.head = node;
            }
            else
            {
                hold = temp;
                while (temp.next != this.head && value > temp.data)
                {
                    hold = temp;
                    temp = temp.next;
                }
                if (temp.data >= value)
                {
                    node.next = hold.next;
                    hold.next = node;
                }
                else
                {
                    node.next = temp.next;
                    temp.next = node;
                }
            }
        }
    }
    public void display()
    {
        if (this.head == null)
        {
            System.out.println("Empty Linked List");
        }
        else
        {
            LinkNode temp = this.head;
            while (temp != null)
            {
                System.out.print("  " + temp.data);
                temp = temp.next;
                if (temp == head)
                {
                    return;
                }
            }
        }
    }
    public static void main(String[] args)
    {
        SortedCircular task = new SortedCircular();
        task.insert(3);
        task.insert(5);
        task.insert(7);
        task.insert(4);
        task.insert(9);
        task.insert(10);
        task.insert(1);
        task.insert(2);
        task.display();
    }
}